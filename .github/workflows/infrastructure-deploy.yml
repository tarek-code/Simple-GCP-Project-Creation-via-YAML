name: Infrastructure Deploy/Destroy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: deploy or destroy
        required: true
        default: deploy
      files:
        description: space-separated YAML paths (e.g., configs/a.yaml configs/b.yaml)
        required: false
      approve:
        description: yes to auto-apply / non-interactive
        required: false
        default: "no"

permissions:
  contents: write

jobs:
  infra:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure ADC with personal credentials
        env:
          PERSONAL: ${{ secrets.PERSONAL_GCP_CREDENTIALS }}
        shell: bash
        run: |
          set -euo pipefail
          CREDS="$RUNNER_TEMP/creds.json"
          printf '%s' "$PERSONAL" > "$CREDS"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$CREDS" >> $GITHUB_ENV
          echo "CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=$CREDS" >> $GITHUB_ENV

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Parse intent and files from commit message
        id: parse
        shell: bash
        run: |
          set -euo pipefail
          MSG="${{ github.event.head_commit.message }}"
          ACTION=""
          APPROVE="no"
          FILES=""
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ACTION="${{ github.event.inputs.action }}"
            APPROVE="${{ github.event.inputs.approve }}"
            FILES="${{ github.event.inputs.files }}"
          else
            shopt -s nocasematch
            [[ "$MSG" =~ deploy ]] && ACTION=deploy || true
            [[ "$MSG" =~ destroy ]] && ACTION=destroy || true
            [[ "$MSG" =~ yes ]] && APPROVE=yes || true
            shopt -u nocasematch
            # Extract explicit file paths from commit message if present
            FILES=$(printf '%s' "$MSG" | grep -oE 'configs/[A-Za-z0-9_./\-]+\.(ya?ml)' | xargs -r echo || true)
            # If none specified in message, fall back to changed files
            if [[ -z "$FILES" ]]; then
              RANGE="${{ github.event.before }}..${{ github.sha }}"
              FILES=$(git diff --name-only $RANGE | grep -E '^configs/.+\.(yaml|yml)$' || true)
            fi
          fi
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "approve=$APPROVE" >> $GITHUB_OUTPUT
          echo "files=$FILES" >> $GITHUB_OUTPUT
          printf "Parsed action='%s' approve='%s' files=\n%s\n" "$ACTION" "$APPROVE" "$FILES"

      - name: Short-circuit if no action detected
        if: steps.parse.outputs.action == ''
        run: |
          echo "No deploy/destroy action detected in commit. Skipping."
          exit 0

      - name: Short-circuit if no config files detected
        if: steps.parse.outputs.files == ''
        run: |
          echo "No configs/*.yaml detected in commit or workflow inputs. Skipping."
          exit 0

      - name: Show plan-only note for destroy without approve
        if: steps.parse.outputs.action == 'destroy' && steps.parse.outputs.approve != 'yes'
        run: |
          echo "Destroy requires approve=yes. Skipping destructive run."
          exit 0

      - name: Run deploy (plan-only unless approve=yes)
        if: steps.parse.outputs.action == 'deploy'
        shell: bash
        run: |
          set -euo pipefail
          FILES=( ${{ steps.parse.outputs.files }} )
          if [[ "${{ steps.parse.outputs.approve }}" == "yes" ]]; then
            # auto-approve applies by piping yes
            yes | python scripts/deploy.py "${FILES[@]}"
          else
            # ensure plan-only by piping no responses
            yes no | python scripts/deploy.py "${FILES[@]}" || true
          fi

      - name: Run destroy (modules by default; add 'project' in commit to delete project)
        if: steps.parse.outputs.action == 'destroy' && steps.parse.outputs.approve == 'yes'
        shell: bash
        run: |
          set -euo pipefail
          FILES=( ${{ steps.parse.outputs.files }} )
          MSG="${{ github.event.head_commit.message }}"
          CHOICE=m
          shopt -s nocasematch
          [[ "$MSG" =~ project ]] && CHOICE=p || true
          shopt -u nocasematch
          # feed: yes then choice m/p
          { echo yes; echo "$CHOICE"; } | python scripts/destroy.py "${FILES[@]}"

      - name: Persist .tf-runs into repo
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -f .tf-runs || true
          git commit -m "CI: persist tf state for ${{ steps.parse.outputs.files }} (action=${{ steps.parse.outputs.action }}, approve=${{ steps.parse.outputs.approve }})" || echo "No changes to commit"
          git push || echo "Nothing pushed"

      - name: Notify Slack (success)
        if: success()
        shell: bash
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          if [[ -z "${SLACK_WEBHOOK_URL:-}" ]]; then exit 0; fi
          ACTION='${{ steps.parse.outputs.action }}'
          APPROVE='${{ steps.parse.outputs.approve }}'
          FILES='${{ steps.parse.outputs.files }}'
          REPO='${{ github.repository }}'
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          MSG="✅ Infra ${ACTION} (approve=${APPROVE}) succeeded for ${FILES} in ${REPO}. <${RUN_URL}|Run details>"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${MSG//\"/\\\"}\"}" "$SLACK_WEBHOOK_URL" || true

      - name: Notify Slack (failure)
        if: failure()
        shell: bash
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          if [[ -z "${SLACK_WEBHOOK_URL:-}" ]]; then exit 0; fi
          ACTION='${{ steps.parse.outputs.action }}'
          APPROVE='${{ steps.parse.outputs.approve }}'
          FILES='${{ steps.parse.outputs.files }}'
          REPO='${{ github.repository }}'
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          MSG="❌ Infra ${ACTION} (approve=${APPROVE}) failed for ${FILES} in ${REPO}. <${RUN_URL}|Run details>"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${MSG//\"/\\\"}\"}" "$SLACK_WEBHOOK_URL" || true
